{
  "key_dict": {
    "MODEL": "azure/gpt-4o",
    "AZURE_API_VERSION": "2025-01-01-preview",
    "AZURE_API_KEY": "bdef9bf150194da5b8ad860046aff989",
    "ORGANIZATION": "327403",
    "AZURE_API_BASE": "https://api.umgpt.umich.edu/azure-openai-api"
  },
  "task_config": {
    "job_name": "default_research",
    "docker_image": "amberljc/curie:latest",
    "dockerfile_name": "ExpDockerfile_pip",
    "benchmark_specific_context": "none",
    "is_user_interrupt_allowed": false,
    "timeout": 600,
    "max_coding_iterations": 10,
    "max_global_steps": 10,
    "supervisor_system_prompt_filename": "prompts/simple/simple-supervisor.txt",
    "control_worker_system_prompt_filename": "prompts/simple/simple-control-worker.txt",
    "patcher_system_prompt_filename": "prompts/simple/simple-patcher.txt",
    "llm_verifier_system_prompt_filename": "prompts/simple/simple-llm-verifier.txt",
    "coding_prompt_filename": "prompts/simple/simple-coding.txt",
    "worker_system_prompt_filename": "prompts/simple/simple-worker.txt",
    "workspace_name": "workspace/mdgen_task_index_1_iter_1_duration_0.67",
    "dataset_dir": "",
    "env_requirements": "",
    "code_instructions": ""
  },
  "question": "You are a highly capable researcher. Your job is to solve a given scientific experiment task based on a real paper, which will require you to formulate hypothesis, design an experiment, write and execute experiment code, analyzing results, and produce a conclusion. You are not allowed to read the paper itself (e.g., the PDF of the research paper). You are not allowed to perform any Git operations, such as checking out commits, switching branches, or accessing other versions of the repository. Work only with the current files and contents as given. Do not use the README to obtain results that the question expects you to derive through experimentation. Only reference the README for information not required to be experimentally obtained, such as baseline results or general setup details. Don't just write code, but also execute code, analyze and produce conclusions. Operate strictly within the provided code repo. Save any written code as a file in the repo. \n\nThe task will be provided as input to you in the form of: a question, description of the method, and optionally specific instructions (labelled as \"agent_instructions\").\n\nOutput your response in the following format in valid JSON:\n{\n  \"design\": \"string or [list, of, strings]\",\n  \"conclusion\": \"...\"\n}\n\nExplanation of output keys:\n- \"design\": Describe your experiment design. This could include experiment variables (i.e., independent, dependent, and control variables), or a general outline of the experimental method. Try your best to use the former. Also, design can be specified as a single string or a list of design steps.\n- \"conclusion\": State your final conclusion based on the experiment you conducted, grounded in the results from your code execution. Provide a general relationship or concrete metrics that answers the research question (e.g., numerical improvement, performance gap, statistical significance, etc.).\n\nInput: \n\nQuestion: Do the sampled trajectories from the forward simulation model exhibit distributional similarity to ground-truth MD trajectories across key collective variables, such as backbone torsions, sidechain torsions, and top TICA components?\n\nMethod: #### Problem Setup\n\n- **Objective**: Reproduce the MDGEN model's ability to generate peptide trajectories conditioned on the first frame, and evaluate whether the generated structural dynamics match those of real MD simulations.\n- **System**: Tetrapeptides simulated via all-atom MD.\n- **Trajectory Generation**:\n  - Model generates 10 ns trajectory segments conditioned on the first frame.\n  - Concatenate 10 segments to form 100 ns-long trajectories.\n\n#### Independent Variables\n\n- **Trajectory generation method**:\n  - **Model-generated**: Forward simulation using MDGEN conditioned on the first frame.\n  - **Reference**: Ground-truth MD trajectories from 100 ns simulations.\n\n#### Dependent Variables (Evaluation Metrics)\n\n- **Distributional Similarity**:\n  - **Jensen-Shannon Divergence (JSD)** over:\n    - Backbone torsion angles\n    - Sidechain torsion angles\n    - Top TICA component (TICA-0)\n- **Sampling Speed** (optional, for qualitative context)\n\n#### Experiment Components\n\n- **Model Setup**:\n  - Train the MDGEN model on tetrapeptide MD data (explicit solvent, 100 ns, timestep 10 ps).\n  - Condition generation on the first frame of each peptide.\n- **Feature Extraction**:\n  - Extract sine and cosine of backbone φ, ψ and sidechain χ torsion angles.\n  - Use Time-lagged Independent Components Analysis (TICA) via PyEMMA for dimensionality reduction.\n- **Evaluation**:\n  - Compute JSD between the generated and reference distributions over:\n    - Individual torsions (discretized to 100 bins)\n    - TICA-0 (1D histogram)\n  - Compare against baseline replicate MD runs (e.g., 1 ns, 10 ns, 100 ns).\n\nAgent Instructions: Your task is to implement a system for evaluating the quality of molecular dynamics simulations generated by a pre-trained model. The system consists of two main components:\n\n1. A trajectory generation script that:\n   - Takes a pre-trained molecular dynamics model checkpoint as input\n   - Loads protein structures from a specified data directory\n   - Generates multiple trajectory rollouts (simulations) for each protein\n   - Saves the generated trajectories in standard molecular formats (PDB and XTC)\n\n2. An analysis script that evaluates the quality of the generated trajectories by:\n   - Loading both generated trajectories and reference (ground truth) molecular dynamics trajectories\n   - Computing distributional similarity metrics between generated and reference trajectories\n   - Specifically calculating Jensen-Shannon Divergence (JSD) over:\n     * Backbone torsion angle distributions\n     * Sidechain torsion angle distributions\n     * Time-lagged Independent Component Analysis (TICA) components\n   - Optionally creating plots and saving the analysis results\n\nThe goal is to quantitatively assess how well the generated trajectories match the statistical properties of real molecular dynamics simulations. The system should support command-line arguments for specifying input/output directories, number of rollouts, and analysis options.\n\nLLM related credentials (if needed) are available in /workspace/setup_apis_exp/\n\nPlease save your response JSON to: outputs/tmp_prompt_gen/93022_task_index_1_iter_1_duration_0.67_eval_gen.json\n\nIn addition, you must create a single shell script named `reproduce_exp_bench.sh`. This script must reproduce the entire experiment from start to finish, including:\n- Any necessary environment setup (e.g., installing dependencies)\n- Running the experiment (e.g., other scripts)\n- Producing the output or result used in your conclusion\n\nWe will use this script to verify your experiment's reproducibility. Make sure it can be run from the root of the repo and reproduces your result end-to-end.",
  "repo_path": "workspace/mdgen_task_index_1_iter_1_duration_0.67"
}