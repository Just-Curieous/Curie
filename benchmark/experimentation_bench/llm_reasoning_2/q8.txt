Question:
What is the relationship between the complexity of a task (e.g., as measured by the number of logical inferences or mathematical operations needed) and the optimal length of the reasoning chain?

The code you need is available in `/starter_file/cot_reasoning_step`

Instructions:
1. Set OpenAI credentials:
```
source /curie/setup/env.sh
```
2. You will call `run_inference.py` with the following parameters. Make sure to read `run_inference.py` via cat first so you understand its contents.

- Set the args.method to auto_cot
- Set the args.model to gpt-4o-mini
- Set the args.dataset to test 2 datasets: gsm8k and last_letters
- Example command:

```
python run_inference.py --dataset last_letters --demo_path demo/last_letters_3 --output_dir experiment/gpt-4o-mini/last_letters_3  > log/gpt-4o-mini/last_letters_3.log #1 represent the number of add step, last_letters is the name of the dataset
python run_inference.py --dataset gsm8k --demo_path demo/gsm8k_1 --output_dir experiment/gpt-4o-mini/gsm8k_1  > log/gpt-4o-mini/gsm8k_1.log
```
- Execute these within the directory `/starter_file/The-Impact-of-Reasoning-Step-Length-on-Large-Language-Models`. This will ensure you don't face file path errors when running the commands above.
- Here are the demos available (you don't need to test all of them, just what makes sense): 
gsm8k_2
gsm8k_3
gsm8k_1
last_letters_1
last_letters_10
last_letters_2
last_letters_3
last_letters_4
last_letters_5
last_letters_6

3. Call run_inference.py with increasing number of reasoning steps. You can change the reasoning steps using different demo. In the above examples, last_letters_3 refers to add 3 reasoning steps, while last_letters_1 would refer to add 1 reasoning step. 
   Optional: You can increase the args.max_length_cot in case the output of the model is truncated, and you need to view all of it. This may be useful when increasing the steps of cot.

4. Determine the optimal number of reasoning steps:
   - Review the log files in the `log/` directory. The accuracy is reported at the end of each file (e.g., `log/gpt-4o-mini/last_letters_1.log`).
   - Identify the demo file associated with the highest accuracy for each dataset.
   - Open the corresponding demo file and count the number of reasoning steps in the rationale section:
     - Exclude the first sentence (e.g., “Let’s think step by step.”).
     - Exclude the final sentence indicating the answer.
     - Only count the intermediate reasoning steps.
   - Record the optimal number of reasoning steps for each dataset.

5. Analyze task complexity:
   - Review the dataset questions and answers to assess task complexity:
     - For example, in `gsm8k`, consider the number of mathematical operations or logical inferences required.
     - In `last_letters`, evaluate the pattern recognition or sequence-following requirements.
   - Compare the complexity of tasks with the corresponding optimal reasoning step counts.

6. Draw conclusions:
   - Summarize your findings for each dataset, including:
     - Dataset name.
     - Log file with the highest accuracy.
     - Optimal number of reasoning steps.
     - Analysis of task complexity.
   - Provide insights into how the complexity of a task influences the optimal length of the reasoning chain.
