# Base image with Python and Conda
FROM continuumio/miniconda3:latest

# Set the working directory inside the container
WORKDIR /curie

# Copy the current directory into the container
COPY curie/environment.yml .
# COPY curie/setup/env.sh setup/

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update package index and install dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    build-essential \
    vim \
    make \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x and npm
RUN curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y nodejs && \
    npm install -g npm@latest

# Verify Node.js version
RUN node --version

# Install dependencies from the Conda environment file
RUN conda env create -f environment.yml && \
    conda clean -a && \
    conda init bash && \
    /bin/bash -c "source ~/.bashrc && conda activate curie" 

RUN /opt/conda/bin/conda init bash
# Install Python and other conda packages
RUN conda install -y -c conda-forge python=3.12 "nodejs>=20" poetry && conda clean --all -y

# Create the keyrings directory and add Docker's official GPG key
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Set up the Docker repository
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" \
    | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Update package index again and install Docker Engine
RUN apt-get update && apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-compose-plugin 

RUN mkdir -p /helper
# WORKDIR /helper
RUN cd /helper && git clone https://github.com/All-Hands-AI/OpenHands.git && cd OpenHands && git checkout 1c7267648327524be3ddfaf4fe340c71c08d845f 
RUN cd /helper/OpenHands && make build

# Activate the Conda virtual environment and install dependencies
RUN /bin/bash -c "source /root/.cache/pypoetry/virtualenvs/openhands-ai-*-py3.12/bin/activate && \
    pip install langchain-core==0.3.29 langgraph==0.2.52"

RUN echo "source /curie/setup/env.sh" >> ~/.bashrc

# Update the Azure configuration FIXME: hardcoded org id
RUN sed -i '474i \          "organization": "499023",' /root/.cache/pypoetry/virtualenvs/openhands-ai-*-py3.12/lib/python3.12/site-packages/litellm/llms/azure/azure.py
# To support docker initialization from Curie
RUN sed -i '237i \                "/var/run/docker.sock": {"bind": "/var/run/docker.sock", "mode": "rw"},' /helper/OpenHands/openhands/runtime/impl/docker/docker_runtime.py
RUN sed -i '36i\    user_id = 123 if user_id == 0 else user_id' /helper/OpenHands/openhands/runtime/utils/runtime_init.py

# Create necessary directories
RUN mkdir -p /workspace
RUN mkdir -p /temp/logs/

# Set PATH to activate the Conda environment automatically in the container
ENV PATH=/opt/conda/envs/langgraph/bin:$PATH

# Ensure bash is the default shell
SHELL ["/bin/bash", "-c"]

# Keep container running
CMD ["tail", "-f", "/dev/null"]